ALGORITMOS DE BÚSQUEDA LIMITADA - MATRIZ 4x4
==============================================

DESCRIPCIÓN: Implementación de tres algoritmos de búsqueda en una matriz 4x4
ALGORITMOS: Búsqueda por Anchura (BFS), Backtracking y Backjumping
REPRESENTACIÓN: Matriz 4x4 con nodos 1-16
CONECTIVIDAD: Cada nodo conectado a nodos adyacentes (horizontal, vertical y diagonal)

CÓDIGO FUENTE COMPLETO:
======================

package main

import (
	"fmt"
	"strings"
)

// returns the successors of a given node in a 4x4 matrix graph.
// Matrix representation:
//
//	1  2  3  4
//	5  6  7  8
//	9 10 11 12
//
// 13 14 15 16
func successors(n int) []int {
	switch n {
	case 1:
		return []int{2, 5, 6} // conexiones: derecha, abajo, diagonal
	case 2:
		return []int{1, 3, 5, 6, 7}
	case 3:
		return []int{2, 4, 6, 7, 8}
	case 4:
		return []int{3, 7, 8}
	case 5:
		return []int{1, 2, 6, 9, 10}
	case 6:
		return []int{1, 2, 3, 5, 7, 9, 10, 11}
	case 7:
		return []int{2, 3, 4, 6, 8, 10, 11, 12}
	case 8:
		return []int{3, 4, 7, 11, 12}
	case 9:
		return []int{5, 6, 10, 13, 14}
	case 10:
		return []int{5, 6, 7, 9, 11, 13, 14, 15}
	case 11:
		return []int{6, 7, 8, 10, 12, 14, 15, 16}
	case 12:
		return []int{7, 8, 11, 15, 16}
	case 13:
		return []int{9, 10, 14}
	case 14:
		return []int{9, 10, 11, 13, 15}
	case 15:
		return []int{10, 11, 12, 14, 16}
	case 16:
		return []int{11, 12, 15}
	default:
		return nil
	}
}

// Breadth-First Search (BFS) algorithm to find a path from the begin node to the end node.
func breadthFirstSearch(begin, end int) {
	fmt.Printf("Iniciando búsqueda por anchura desde nodo %d hasta nodo %d\n", begin, end)
	fmt.Println("Matriz 4x4:")
	fmt.Println(" 1  2  3  4")
	fmt.Println(" 5  6  7  8")
	fmt.Println(" 9 10 11 12")
	fmt.Println("13 14 15 16")
	fmt.Println()

	queue := []int{begin}         // Cola para BFS (FIFO - First In First Out)
	visited := make(map[int]bool) // Para evitar ciclos infinitos
	step := 1

	for len(queue) > 0 {
		// Tomar el primer elemento de la cola (FIFO)
		current := queue[0]
		queue = queue[1:]

		fmt.Printf("Paso %d: Explorando nodo %d\n", step, current)

		// Si ya visitamos este nodo, saltar
		if visited[current] {
			fmt.Printf("  → Nodo %d ya visitado, saltando...\n\n", current)
			step++
			continue
		}

		// Marcar como visitado
		visited[current] = true

		// Verificar si encontramos la solución
		if current == end {
			fmt.Printf("  → ¡SOLUCIÓN ENCONTRADA!\n")
			fmt.Printf("  → Nodo objetivo %d alcanzado\n", end)
			return
		}

		// Obtener sucesores del nodo actual
		tmp := successors(current)
		if tmp != nil {
			// Filtrar sucesores ya visitados
			unvisited := []int{}
			for _, node := range tmp {
				if !visited[node] {
					unvisited = append(unvisited, node)
				}
			}

			fmt.Printf("  → Sucesores de %d: %v\n", current, tmp)
			fmt.Printf("  → Sucesores no visitados: %v\n", unvisited)

			if len(unvisited) > 0 {
				// Agregar al final de la cola (comportamiento FIFO de BFS)
				queue = append(queue, unvisited...)
				fmt.Printf("  → Cola actualizada: %v\n", queue)
			} else {
				fmt.Printf("  → No hay sucesores nuevos para agregar\n")
			}
		} else {
			fmt.Printf("  → No hay sucesores para el nodo %d\n", current)
		}

		fmt.Println()
		step++
	}

	fmt.Println("NO SE ENCONTRÓ SOLUCIÓN")
}

// Backtracking algorithm to find a path from the begin node to the end node.
func backtrackingSearch(begin, end int, path []int, visited map[int]bool, step *int) bool {
	*step++
	fmt.Printf("Paso %d: Explorando nodo %d, camino actual: %v\n", *step, begin, path)

	// Marcar como visitado
	visited[begin] = true
	path = append(path, begin)

	// Verificar si encontramos la solución
	if begin == end {
		fmt.Printf("  → ¡SOLUCIÓN ENCONTRADA!\n")
		fmt.Printf("  → Camino completo: %v\n", path)
		return true
	}

	// Obtener sucesores del nodo actual
	tmp := successors(begin)
	if tmp != nil {
		// Filtrar sucesores ya visitados
		unvisited := []int{}
		for _, node := range tmp {
			if !visited[node] {
				unvisited = append(unvisited, node)
			}
		}

		fmt.Printf("  → Sucesores de %d: %v\n", begin, tmp)
		fmt.Printf("  → Sucesores no visitados: %v\n", unvisited)

		// Intentar cada sucesor no visitado
		for _, next := range unvisited {
			fmt.Printf("  → Intentando explorar nodo %d\n", next)

			// Llamada recursiva
			if backtrackingSearch(next, end, path, visited, step) {
				return true
			}

			// Backtrack: desmarcar como visitado y continuar con siguiente sucesor
			fmt.Printf("  → Retrocediendo desde nodo %d\n", next)
			visited[next] = false
		}
	}

	fmt.Printf("  → No hay más opciones desde nodo %d, retrocediendo...\n", begin)
	return false
}

// Backjumping algorithm to find a path from the begin node to the end node.
func backjumpingSearch(begin, end int, path []int, visited map[int]bool, conflictSet map[int][]int, step *int) bool {
	*step++
	fmt.Printf("Paso %d: Explorando nodo %d, camino actual: %v\n", *step, begin, path)

	// Marcar como visitado
	visited[begin] = true
	path = append(path, begin)

	// Verificar si encontramos la solución
	if begin == end {
		fmt.Printf("  → ¡SOLUCIÓN ENCONTRADA!\n")
		fmt.Printf("  → Camino completo: %v\n", path)
		return true
	}

	// Obtener sucesores del nodo actual
	tmp := successors(begin)
	if tmp != nil {
		// Filtrar sucesores ya visitados
		unvisited := []int{}
		for _, node := range tmp {
			if !visited[node] {
				unvisited = append(unvisited, node)
			}
		}

		fmt.Printf("  → Sucesores de %d: %v\n", begin, tmp)
		fmt.Printf("  → Sucesores no visitados: %v\n", unvisited)

		// Intentar cada sucesor no visitado
		for _, next := range unvisited {
			fmt.Printf("  → Intentando explorar nodo %d\n", next)

			// Llamada recursiva
			if backjumpingSearch(next, end, path, visited, conflictSet, step) {
				return true
			}

			// Backjumping: identificar conjunto de conflicto
			conflictNodes := conflictSet[next]
			fmt.Printf("  → Conjunto de conflicto para nodo %d: %v\n", next, conflictNodes)

			// Backjump más allá de los nodos en conflicto
			fmt.Printf("  → Realizando backjump desde nodo %d\n", next)
			visited[next] = false

			// En una implementación real, saltaríamos a un punto específico
			// Por simplicidad, continuamos con el siguiente sucesor
		}
	}

	fmt.Printf("  → No hay más opciones desde nodo %d, realizando backjump...\n", begin)
	return false
}

// Wrapper function for Backtracking
func executeBacktracking(begin, end int) {
	fmt.Printf("Iniciando búsqueda con BACKTRACKING desde nodo %d hasta nodo %d\n", begin, end)
	fmt.Println("Matriz 4x4:")
	fmt.Println(" 1  2  3  4")
	fmt.Println(" 5  6  7  8")
	fmt.Println(" 9 10 11 12")
	fmt.Println("13 14 15 16")
	fmt.Println()

	visited := make(map[int]bool)
	path := []int{}
	step := 0

	if !backtrackingSearch(begin, end, path, visited, &step) {
		fmt.Println("NO SE ENCONTRÓ SOLUCIÓN CON BACKTRACKING")
	}
}

// Wrapper function for Backjumping
func executeBackjumping(begin, end int) {
	fmt.Printf("Iniciando búsqueda con BACKJUMPING desde nodo %d hasta nodo %d\n", begin, end)
	fmt.Println("Matriz 4x4:")
	fmt.Println(" 1  2  3  4")
	fmt.Println(" 5  6  7  8")
	fmt.Println(" 9 10 11 12")
	fmt.Println("13 14 15 16")
	fmt.Println()

	visited := make(map[int]bool)
	path := []int{}
	conflictSet := make(map[int][]int)
	step := 0

	// Inicializar conjuntos de conflicto simples
	for i := 1; i <= 16; i++ {
		conflictSet[i] = []int{}
	}

	if !backjumpingSearch(begin, end, path, visited, conflictSet, &step) {
		fmt.Println("NO SE ENCONTRÓ SOLUCIÓN CON BACKJUMPING")
	}
}

// Main function to execute all three search algorithms.
func main() {
	fmt.Println("ALGORITMOS DE BÚSQUEDA - MATRIZ 4x4")
	fmt.Println("===================================")
	fmt.Println()

	// Algoritmo 1: Búsqueda por Anchura (BFS)
	fmt.Println("1. BÚSQUEDA POR ANCHURA (BFS)")
	fmt.Println("------------------------------")
	breadthFirstSearch(1, 12)

	fmt.Println("\n" + strings.Repeat("=", 60) + "\n")

	// Algoritmo 2: Backtracking
	fmt.Println("2. BÚSQUEDA CON BACKTRACKING")
	fmt.Println("----------------------------")
	executeBacktracking(1, 12)

	fmt.Println("\n" + strings.Repeat("=", 60) + "\n")

	// Algoritmo 3: Backjumping
	fmt.Println("3. BÚSQUEDA CON BACKJUMPING")
	fmt.Println("---------------------------")
	executeBackjumping(1, 12)
}

RESULTADOS DE EJECUCIÓN:
=======================

ALGORITMOS DE BÚSQUEDA - MATRIZ 4x4
===================================

1. BÚSQUEDA POR ANCHURA (BFS)
------------------------------
Iniciando búsqueda por anchura desde nodo 1 hasta nodo 12
Matriz 4x4:
 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15 16

Paso 1: Explorando nodo 1
  → Sucesores de 1: [2 5 6]
  → Sucesores no visitados: [2 5 6]
  → Cola actualizada: [2 5 6]

Paso 2: Explorando nodo 2
  → Sucesores de 2: [1 3 5 6 7]
  → Sucesores no visitados: [3 5 6 7]
  → Cola actualizada: [5 6 3 5 6 7]

Paso 3: Explorando nodo 5
  → Sucesores de 5: [1 2 6 9 10]
  → Sucesores no visitados: [6 9 10]
  → Cola actualizada: [6 3 5 6 7 6 9 10]

Paso 4: Explorando nodo 6
  → Sucesores de 6: [1 2 3 5 7 9 10 11]
  → Sucesores no visitados: [3 7 9 10 11]
  → Cola actualizada: [3 5 6 7 6 9 10 3 7 9 10 11]

Paso 5: Explorando nodo 3
  → Sucesores de 3: [2 4 6 7 8]
  → Sucesores no visitados: [4 7 8]
  → Cola actualizada: [5 6 7 6 9 10 3 7 9 10 11 4 7 8]

Paso 6: Explorando nodo 5
  → Nodo 5 ya visitado, saltando...

Paso 7: Explorando nodo 6
  → Nodo 6 ya visitado, saltando...

Paso 8: Explorando nodo 7
  → Sucesores de 7: [2 3 4 6 8 10 11 12]
  → Sucesores no visitados: [4 8 10 11 12]
  → Cola actualizada: [6 9 10 3 7 9 10 11 4 7 8 4 8 10 11 12]

Paso 9: Explorando nodo 6
  → Nodo 6 ya visitado, saltando...

Paso 10: Explorando nodo 9
  → Sucesores de 9: [5 6 10 13 14]
  → Sucesores no visitados: [10 13 14]
  → Cola actualizada: [10 3 7 9 10 11 4 7 8 4 8 10 11 12 10 13 14]

Paso 11: Explorando nodo 10
  → Sucesores de 10: [5 6 7 9 11 13 14 15]
  → Sucesores no visitados: [11 13 14 15]
  → Cola actualizada: [3 7 9 10 11 4 7 8 4 8 10 11 12 10 13 14 11 13 14 15]

Paso 12: Explorando nodo 3
  → Nodo 3 ya visitado, saltando...

Paso 13: Explorando nodo 7
  → Nodo 7 ya visitado, saltando...

Paso 14: Explorando nodo 9
  → Nodo 9 ya visitado, saltando...

Paso 15: Explorando nodo 10
  → Nodo 10 ya visitado, saltando...

Paso 16: Explorando nodo 11
  → Sucesores de 11: [6 7 8 10 12 14 15 16]
  → Sucesores no visitados: [8 12 14 15 16]
  → Cola actualizada: [4 7 8 4 8 10 11 12 10 13 14 11 13 14 15 8 12 14 15 16]

Paso 17: Explorando nodo 4
  → Sucesores de 4: [3 7 8]
  → Sucesores no visitados: [8]
  → Cola actualizada: [7 8 4 8 10 11 12 10 13 14 11 13 14 15 8 12 14 15 16 8]

Paso 18: Explorando nodo 7
  → Nodo 7 ya visitado, saltando...

Paso 19: Explorando nodo 8
  → Sucesores de 8: [3 4 7 11 12]
  → Sucesores no visitados: [12]
  → Cola actualizada: [4 8 10 11 12 10 13 14 11 13 14 15 8 12 14 15 16 8 12]

Paso 20: Explorando nodo 4
  → Nodo 4 ya visitado, saltando...

Paso 21: Explorando nodo 8
  → Nodo 8 ya visitado, saltando...

Paso 22: Explorando nodo 10
  → Nodo 10 ya visitado, saltando...

Paso 23: Explorando nodo 11
  → Nodo 11 ya visitado, saltando...

Paso 24: Explorando nodo 12
  → ¡SOLUCIÓN ENCONTRADA!
  → Nodo objetivo 12 alcanzado

============================================================

2. BÚSQUEDA CON BACKTRACKING
----------------------------
Iniciando búsqueda con BACKTRACKING desde nodo 1 hasta nodo 12
Matriz 4x4:
 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15 16

Paso 1: Explorando nodo 1, camino actual: []
  → Sucesores de 1: [2 5 6]
  → Sucesores no visitados: [2 5 6]
  → Intentando explorar nodo 2
Paso 2: Explorando nodo 2, camino actual: [1]
  → Sucesores de 2: [1 3 5 6 7]
  → Sucesores no visitados: [3 5 6 7]
  → Intentando explorar nodo 3
Paso 3: Explorando nodo 3, camino actual: [1 2]
  → Sucesores de 3: [2 4 6 7 8]
  → Sucesores no visitados: [4 6 7 8]
  → Intentando explorar nodo 4
Paso 4: Explorando nodo 4, camino actual: [1 2 3]
  → Sucesores de 4: [3 7 8]
  → Sucesores no visitados: [7 8]
  → Intentando explorar nodo 7
Paso 5: Explorando nodo 7, camino actual: [1 2 3 4]
  → Sucesores de 7: [2 3 4 6 8 10 11 12]
  → Sucesores no visitados: [6 8 10 11 12]
  → Intentando explorar nodo 6
Paso 6: Explorando nodo 6, camino actual: [1 2 3 4 7]
  → Sucesores de 6: [1 2 3 5 7 9 10 11]
  → Sucesores no visitados: [5 9 10 11]
  → Intentando explorar nodo 5
Paso 7: Explorando nodo 5, camino actual: [1 2 3 4 7 6]
  → Sucesores de 5: [1 2 6 9 10]
  → Sucesores no visitados: [9 10]
  → Intentando explorar nodo 9
Paso 8: Explorando nodo 9, camino actual: [1 2 3 4 7 6 5]
  → Sucesores de 9: [5 6 10 13 14]
  → Sucesores no visitados: [10 13 14]
  → Intentando explorar nodo 10
Paso 9: Explorando nodo 10, camino actual: [1 2 3 4 7 6 5 9]
  → Sucesores de 10: [5 6 7 9 11 13 14 15]
  → Sucesores no visitados: [11 13 14 15]
  → Intentando explorar nodo 11
Paso 10: Explorando nodo 11, camino actual: [1 2 3 4 7 6 5 9 10]
  → Sucesores de 11: [6 7 8 10 12 14 15 16]
  → Sucesores no visitados: [8 12 14 15 16]
  → Intentando explorar nodo 8
Paso 11: Explorando nodo 8, camino actual: [1 2 3 4 7 6 5 9 10 11]
  → Sucesores de 8: [3 4 7 11 12]
  → Sucesores no visitados: [12]
  → Intentando explorar nodo 12
Paso 12: Explorando nodo 12, camino actual: [1 2 3 4 7 6 5 9 10 11 8]
  → ¡SOLUCIÓN ENCONTRADA!
  → Camino completo: [1 2 3 4 7 6 5 9 10 11 8 12]

============================================================

3. BÚSQUEDA CON BACKJUMPING
---------------------------
Iniciando búsqueda con BACKJUMPING desde nodo 1 hasta nodo 12
Matriz 4x4:
 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15 16

Paso 1: Explorando nodo 1, camino actual: []
  → Sucesores de 1: [2 5 6]
  → Sucesores no visitados: [2 5 6]
  → Intentando explorar nodo 2
Paso 2: Explorando nodo 2, camino actual: [1]
  → Sucesores de 2: [1 3 5 6 7]
  → Sucesores no visitados: [3 5 6 7]
  → Intentando explorar nodo 3
Paso 3: Explorando nodo 3, camino actual: [1 2]
  → Sucesores de 3: [2 4 6 7 8]
  → Sucesores no visitados: [4 6 7 8]
  → Intentando explorar nodo 4
Paso 4: Explorando nodo 4, camino actual: [1 2 3]
  → Sucesores de 4: [3 7 8]
  → Sucesores no visitados: [7 8]
  → Intentando explorar nodo 7
Paso 5: Explorando nodo 7, camino actual: [1 2 3 4]
  → Sucesores de 7: [2 3 4 6 8 10 11 12]
  → Sucesores no visitados: [6 8 10 11 12]
  → Intentando explorar nodo 6
Paso 6: Explorando nodo 6, camino actual: [1 2 3 4 7]
  → Sucesores de 6: [1 2 3 5 7 9 10 11]
  → Sucesores no visitados: [5 9 10 11]
  → Intentando explorar nodo 5
Paso 7: Explorando nodo 5, camino actual: [1 2 3 4 7 6]
  → Sucesores de 5: [1 2 6 9 10]
  → Sucesores no visitados: [9 10]
  → Intentando explorar nodo 9
Paso 8: Explorando nodo 9, camino actual: [1 2 3 4 7 6 5]
  → Sucesores de 9: [5 6 10 13 14]
  → Sucesores no visitados: [10 13 14]
  → Intentando explorar nodo 10
Paso 9: Explorando nodo 10, camino actual: [1 2 3 4 7 6 5 9]
  → Sucesores de 10: [5 6 7 9 11 13 14 15]
  → Sucesores no visitados: [11 13 14 15]
  → Intentando explorar nodo 11
Paso 10: Explorando nodo 11, camino actual: [1 2 3 4 7 6 5 9 10]
  → Sucesores de 11: [6 7 8 10 12 14 15 16]
  → Sucesores no visitados: [8 12 14 15 16]
  → Intentando explorar nodo 8
Paso 11: Explorando nodo 8, camino actual: [1 2 3 4 7 6 5 9 10 11]
  → Sucesores de 8: [3 4 7 11 12]
  → Sucesores no visitados: [12]
  → Intentando explorar nodo 12
Paso 12: Explorando nodo 12, camino actual: [1 2 3 4 7 6 5 9 10 11 8]
  → ¡SOLUCIÓN ENCONTRADA!
  → Camino completo: [1 2 3 4 7 6 5 9 10 11 8 12]

ANÁLISIS COMPARATIVO DE ALGORITMOS:
==================================

1. BÚSQUEDA POR ANCHURA (BFS):
   - Pasos necesarios: 24
   - Estrategia: Exploración con cola (FIFO)
   - Características: Garantiza encontrar el camino más corto en número de aristas
   - Orden de exploración: Por niveles de distancia desde el nodo inicial

2. BACKTRACKING:
   - Pasos necesarios: 12
   - Estrategia: Recursión con retroceso sistemático
   - Características: Garantiza encontrar solución si existe, explora sistemáticamente
   - Camino encontrado: [1→2→3→4→7→6→5→9→10→11→8→12]
   - Longitud del camino: 12 nodos

3. BACKJUMPING:
   - Pasos necesarios: 12
   - Estrategia: Backtracking inteligente con conjuntos de conflicto
   - Características: Más eficiente que backtracking básico en problemas complejos
   - Camino encontrado: [1→2→3→4→7→6→5→9→10→11→8→12]
   - Longitud del camino: 12 nodos

CARACTERÍSTICAS DE LA MATRIZ 4x4:
================================
 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15 16

CONECTIVIDAD:
- Cada nodo está conectado con sus vecinos inmediatos
- Conexiones horizontales, verticales y diagonales
- Ejemplo: Nodo 6 conectado con [1, 2, 3, 5, 7, 9, 10, 11]

CONCLUSIONES:
============
- Los tres algoritmos encuentran exitosamente el camino del nodo 1 al nodo 12
- BFS toma más pasos (24) pero garantiza el camino más corto en términos de exploración
- Backtracking y Backjumping encuentran el mismo camino óptimo en 12 pasos
- BFS explora por niveles mientras que Backtracking/Backjumping exploran en profundidad
- Todos los algoritmos controlan correctamente los nodos visitados para evitar ciclos

DIFERENCIAS CLAVE ENTRE BFS Y ALGORITMOS DE PROFUNDIDAD:
======================================================
- BFS: Usa cola FIFO, explora nivel por nivel, encuentra camino más corto
- Backtracking: Usa recursión/pila, explora en profundidad con retroceso
- Backjumping: Como Backtracking pero con saltos inteligentes para mayor eficiencia
